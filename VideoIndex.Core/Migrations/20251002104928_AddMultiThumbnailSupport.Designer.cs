// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VideoIndex.Core.Data;

#nullable disable

namespace VideoIndex.Core.Migrations
{
    [DbContext(typeof(VideoIndexDbContext))]
    [Migration("20251002104928_AddMultiThumbnailSupport")]
    partial class AddMultiThumbnailSupport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.20");

            modelBuilder.Entity("VideoIndex.Core.Models.MediaFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AudioBitrate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AudioChannels")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AudioFormat")
                        .HasColumnType("TEXT");

                    b.Property<long?>("BitRate")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Extension")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double?>("FrameRate")
                        .HasColumnType("REAL");

                    b.Property<int?>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("LengthSeconds")
                        .HasColumnType("REAL");

                    b.Property<string>("OrientationTags")
                        .HasColumnType("TEXT");

                    b.Property<string>("OtherTags")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PerformerCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PerformerNames")
                        .HasColumnType("TEXT");

                    b.Property<int>("RootId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sha256")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SourceTypes")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceUsername")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudioName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoFormat")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Width")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Filename");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.HasIndex("PerformerCount");

                    b.HasIndex("RootId");

                    b.HasIndex("Sha256");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("Year");

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("VideoIndex.Core.Models.ScanRoot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LastScannedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ScanRoots");
                });

            modelBuilder.Entity("VideoIndex.Core.Models.Thumbnail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("GeneratedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Jpeg")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("MediaFileId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Width")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MediaFileId");

                    b.ToTable("Thumbnails");
                });

            modelBuilder.Entity("VideoIndex.Core.Models.MediaFile", b =>
                {
                    b.HasOne("VideoIndex.Core.Models.ScanRoot", "Root")
                        .WithMany()
                        .HasForeignKey("RootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Root");
                });

            modelBuilder.Entity("VideoIndex.Core.Models.Thumbnail", b =>
                {
                    b.HasOne("VideoIndex.Core.Models.MediaFile", "MediaFile")
                        .WithMany("Thumbnails")
                        .HasForeignKey("MediaFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaFile");
                });

            modelBuilder.Entity("VideoIndex.Core.Models.MediaFile", b =>
                {
                    b.Navigation("Thumbnails");
                });
#pragma warning restore 612, 618
        }
    }
}

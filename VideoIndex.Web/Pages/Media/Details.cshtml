@page "/media/{id:int}"
@model VideoIndex.Web.Pages.Media.DetailsModel

@{
    ViewData["Title"] = "Media Details";
    var m = Model.Item!;
    var initSrc = m.SourceTypes ?? new List<string>();
    var initOri = m.OrientationTags ?? new List<string>();
    var initOther = m.OtherTags ?? new List<string>();
    var initPerf = m.PerformerNames ?? new List<string>();
}

@functions {
  private static string WbrPath(string? path)
  {
    if (string.IsNullOrEmpty(path)) return "";
    var enc = System.Net.WebUtility.HtmlEncode(path);
    return enc.Replace("\\", "\\<wbr>").Replace("/", "/<wbr>");
  }
}

@await Html.PartialAsync("_TopNav")

<h1>@m.Filename</h1>
<div id="summaryChips" class="hstack" style="margin:.5rem 0 1rem; gap: 0.4rem;"></div>

<div id="vi_meta"
     data-parent-dir="@System.IO.Path.GetDirectoryName(m.Path)"
     data-root-path="@m.RootPath"
     data-root-name="@m.Root"></div>

<div class="media-details-grid">
  <div id="col-left">
    <div class="player-box">
        <img class="thumb-bg" src="/api/media/@m.Id/thumb" alt="">
        <img id="vi_thumb" class="player-thumb" alt="thumbnail" src="/api/media/@m.Id/thumb?t=@DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()" />
        <video id="vi_video" class="player-video" style="display:none;" controls playsinline></video>
        
        <div class="player-button-group">
            <button id="vi_toggle" type="button" class="play-overlay" title="Play/Pause">‚ñ∂</button>
            <button id="vi_aspect_toggle" type="button" class="aspect-toggle-btn" title="Toggle aspect ratio">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M19,3 C20.5976809,3 21.9036609,4.24891996 21.9949073,5.82372721 L22,6 L22,18 C22,19.5976809 20.75108,20.9036609 19.1762728,20.9949073 L19,21 L5,21 C3.40231912,21 2.09633912,19.75108 2.00509269,18.1762728 L2,18 L2,6 C2,4.40231912 3.24891996,3.09633912 4.82372721,3.00509269 L5,3 L19,3 Z M19,5 L5,5 C4.48716416,5 4.06449284,5.38604019 4.00672773,5.88337887 L4,6 L4,18 C4,18.5128358 4.38604019,18.9355072 4.88337887,18.9932723 L5,19 L19,19 C19.5128358,19 19.9355072,18.6139598 19.9932723,18.1166211 L20,18 L20,6 C20,5.48716416 19.6139598,5.06449284 19.1166211,5.00672773 L19,5 Z M17,12 C17.5128358,12 17.9355072,12.3860402 17.9932723,12.8833789 L18,13 L18,16 C18,16.5128358 17.6139598,16.9355072 17.1166211,16.9932723 L17,17 L14,17 C13.4477153,17 13,16.5522847 13,16 C13,15.4871642 13.3860402,15.0644928 13.8833789,15.0067277 L14,15 L16,15 L16,13 C16,12.4871642 16.3860402,12.0644928 16.8833789,12.0067277 L17,12 Z M10,7 C10.5522847,7 11,7.44771525 11,8 C11,8.51283584 10.6139598,8.93550716 10.1166211,8.99327227 L10,9 L8,9 L8,11 C8,11.5128358 7.61395981,11.9355072 7.11662113,11.9932723 L7,12 C6.48716416,12 6.06449284,11.6139598 6.00672773,11.1166211 L6,11 L6,8 C6,7.48716416 6.38604019,7.06449284 6.88337887,7.00672773 L7,7 L10,7 Z"></path>
              </svg>
            </button>
        </div>
    </div>

    <div class="player-actions">
      <button id="vi_open" class="btn" type="button">Open in player</button>
      <button id="vi_reveal" class="btn ghost" type="button">Show in folder</button>
      <button id="vi_back2thumb" class="btn ghost" type="button" style="display:none;">Back to thumbnail</button>
    </div>
    <div id="vi_status" class="muted" style="margin-top:6px;"></div>

    <div id="dirCrumbs" class="hstack" aria-label="Folder breadcrumbs" style="margin-top:.35rem; gap: 6px;"></div>

    <div class="details-section">
      <h3>Details</h3>
      <dl>
        <dt>Size</dt><dd>@m.SizeHuman</dd>
        <dt>Length</dt><dd>@(m.LengthHuman ?? "n/a")</dd>
        <dt>Resolution</dt><dd>@(m.Width is null || m.Height is null ? "n/a" : $"{m.Width}√ó{m.Height}")</dd>
        <dt>Bitrate</dt><dd>@(m.BitRateHuman ?? "n/a")</dd>
        <dt>Frame rate</dt><dd>@(m.FrameRate?.ToString("0.###") ?? "n/a")</dd>
        <dt>Video</dt><dd>@(m.VideoFormat ?? "n/a")</dd>
        <dt class="fullrow" style="color:#111;">Path</dt>
        <dd class="mono fullrow"><span class="break-word">@Html.Raw(WbrPath(m.Path))</span></dd>
      </dl>

      <details class="kv" id="rootBox">
        <summary>Root</summary>
        <div class="kv-body mono muted">@m.Root <span class="muted">(@m.RootPath)</span></div>
      </details>
      <details class="kv" id="shaBox">
        <summary>SHA-256</summary>
        <div class="kv-body mono break-word">@m.Sha256</div>
      </details>

      <div class="dates2">
        <div><span class="k">Created</span> <span>@m.CreatedAt.LocalDateTime</span></div>
        <div><span class="k">Updated</span> <span>@m.UpdatedAt.LocalDateTime</span></div>
      </div>
    </div>
     <div class="autotag-box">
      <div><button id="autoTagBtn" type="button" class="btn">Auto-tag</button><span id="autoTagStatus" class="muted"></span></div>
    </div>
  </div>

  <div id="col-right">
    <div class="navline">
      <div class="left hstack">
        <label class="hstack" title="Only navigate among items with no user-defined tags">
          <input type="checkbox" id="navUntagged"><span>Untagged only</span>
        </label>
        <label class="hstack" title="Only navigate among items that have user-defined tags">
          <input type="checkbox" id="navTagged"><span>Tagged only</span>
        </label>
        <label class="hstack" title="Limit navigation to a specific directory (non-recursive)">
          <input type="checkbox" id="navDirOnly"><span>Selected directory only</span>
        </label>
      </div>
      <div class="right hstack">
        <a id="navPrev" class="btn ghost disabled" href="#" aria-disabled="true" title="No previous item">‚Üê Prev</a>
        <button id="navRandom" class="btn ghost" type="button" title="Feeling Lucky ‚ú®">üîÄ</button>
        <a id="navNext" class="btn ghost disabled" href="#" aria-disabled="true" title="No next item">Next ‚Üí</a>
      </div>
    </div>

    <details id="editBox" class="edit-panel">
      <summary>
        <strong id="editSummaryText" class="summary-text">Edit details (click to open)</strong>
        <span id="saveStatus" class="muted" style="margin-right:.5rem;" aria-live="polite"></span>
        <button id="saveBtn" class="btn save idle" type="button" title="Save changes">Save</button>
      </summary>
      <div class="edit-body">
        <div class="grid2">
          <div class="field">
            <label>Performer count <small>(Solo/Duo/Group derived)</small></label>
            <div class="hstack">
              <input id="performerCount" type="number" min="0" value="@(m.PerformerCount?.ToString() ?? "")" style="width:7rem">
              <button type="button" class="btn ghost pcbtn" data-pc="1">Solo</button>
              <button type="button" class="btn ghost pcbtn" data-pc="2">Duo</button>
              <button type="button" class="btn ghost pcbtn" data-pc="3">Group</button>
            </div>
          </div>
          <div class="field">
            <label>Year</label>
            <input id="year" type="number" min="1900" max="2100" value="@(m.Year?.ToString() ?? "")">
          </div>
          <div class="field" style="grid-column:1 / -1;">
            <label>Orientation <small>(multi-select)</small></label>
            <div class="checkgrid" id="oriGroup">
              <button type="button" class="tagbtn" data-ori="Gay">Gay</button>
              <button type="button" class="tagbtn" data-ori="Straight">Straight</button>
              <button type="button" class="tagbtn" data-ori="Bi">Bi</button>
              <button type="button" class="tagbtn" data-ori="FtM Trans">FtM Trans</button>
              <button type="button" class="tagbtn" data-ori="MtF Trans">MtF Trans</button>
            </div>
          </div>
          <div class="field" style="grid-column:1 / -1;">
            <label>Source Type <small>(multi-select)</small></label>
            <div class="checkgrid" id="srcGroup">
                <button type="button" class="tagbtn" data-src="Studio">Studio</button>
                <button type="button" class="tagbtn" data-src="OnlyFans">OnlyFans</button>
                <button type="button" class="tagbtn" data-src="Amateur">Amateur</button>
                <button type="button" class="tagbtn" data-src="Vintage">Vintage</button>
                <button type="button" class="tagbtn" data-src="Webcam">Webcam</button>
                <button type="button" class="tagbtn" data-src="Spycam">Spycam</button>
                <button type="button" class="tagbtn" data-src="CCTV">CCTV</button>
                <button type="button" class="tagbtn" data-src="Selfie">Selfie</button>
                <button type="button" class="tagbtn" data-src="Social Media">Social Media</button>
                <button type="button" class="tagbtn" data-src="Animated">Animated</button>
                <button type="button" class="tagbtn" data-src="Unknown">Unknown</button>
            </div>
          </div>
          <div class="field">
            <label>Studio name <small>(enabled when Source Type includes Studio)</small></label>
            <input id="studioName" type="text" list="dl-studio" value="@(m.StudioName ?? "")" placeholder="e.g., A24, Acme‚Ä¶">
            <datalist id="dl-studio"></datalist>
          </div>
          <div class="field">
            <label>Source user <small>(OnlyFans / Social Media)</small></label>
            <input id="sourceUser" type="text" value="@(m.SourceUsername ?? "")">
          </div>
          <div class="field" style="grid-column:1 / -1;">
            <label>Other tags <small>(comma or Enter to add)</small></label>
            <input id="otherTagsInput" type="text" list="dl-other" placeholder="black-and-white, remaster, ‚Ä¶">
            <datalist id="dl-other"></datalist>
            <div id="otherChips" class="hstack"></div>
            <div class="muted">Type a tag and press <b>,</b> or <b>Enter</b> to commit.</div>
          </div>
          <div class="field" style="grid-column:1 / -1;">
            <label>Performers <small>(comma or Enter to add)</small></label>
            <input id="performersInput" type="text" list="dl-performers" placeholder="dean winchester, mike read">
            <datalist id="dl-performers"></datalist>
            <div id="performerChips" class="hstack"></div>
            <div class="muted">Press <b>,</b> or <b>Enter</b> to commit a name.</div>
          </div>
        </div>
      </div>
    </details>
  </div>
</div>
<script>
  const id = @m.Id;
  const $ = s => document.querySelector(s);
  const $$ = s => Array.from(document.querySelectorAll(s));
  // sticky keys
  const LS_KEYS = { untagged: "vi_nav_untagged", tagged: "vi_nav_tagged", dirOnly: "vi_nav_dir_only", dirPath: "vi_nav_dir_path" };
  function loadFilterState(){ const u = localStorage.getItem(LS_KEYS.untagged) === "true"; const t = localStorage.getItem(LS_KEYS.tagged) === "true"; return (u && t) ? { u:false, t:false } : { u, t }; }
  function saveFilterState(u, t){ localStorage.setItem(LS_KEYS.untagged, u ? "true" : "false"); localStorage.setItem(LS_KEYS.tagged, t ? "true" : "false"); }

  function loadDirState(){ const only = localStorage.getItem(LS_KEYS.dirOnly) === "true"; const path = localStorage.getItem(LS_KEYS.dirPath) || ""; return { only, path }; }
  function saveDirState(only, path){ localStorage.setItem(LS_KEYS.dirOnly, only ? "true" : "false"); if (path !== undefined) localStorage.setItem(LS_KEYS.dirPath, path || ""); }
  function currentParentDir(){ return document.getElementById("vi_meta")?.dataset.parentDir || ""; }

  // --- Breadcrumbs ---
  function eqPath(a,b){ if (!a || !b) return a === b; const na=a.replace(/\\/g,'/'); const nb=b.replace(/\\/g,'/'); return na.toLowerCase()===nb.toLowerCase(); }

  function makeBreadcrumbs(){
    const meta = document.getElementById('vi_meta');
    if (!meta) return [];
    const rootPath = meta.dataset.rootPath || '';
    const rootName = meta.dataset.rootName || (rootPath || 'Root');
    const parentDir = meta.dataset.parentDir || '';
    if (!rootPath || !parentDir) return [];

    const sep = rootPath.includes('\\') ? '\\' : '/';
    const join = (base, part) => base.replace(new RegExp(sep + '$'), '') + sep + part;

    const rpN = rootPath.replace(/\\/g,'/');
    const pdN = parentDir.replace(/\\/g,'/');
    let rel = '';
    if (pdN.toLowerCase().startsWith(rpN.toLowerCase())) rel = pdN.slice(rpN.length).replace(/^\/+/, '');
    const parts = rel ? rel.split('/').filter(Boolean) : [];
    const crumbs = [{ name: rootName, path: rootPath }];
    let acc = rootPath;
    for (const part of parts) { acc = join(acc, part); crumbs.push({ name: part, path: acc }); }
    return crumbs;
  }

  function renderBreadcrumbs(){
    const holder = document.getElementById('dirCrumbs'); if (!holder) return;
    const crumbs = makeBreadcrumbs();
    const { only, path } = loadDirState();

    holder.innerHTML = '';
    for (const c of crumbs) {
      const span = document.createElement('span');
      // *** CHANGE HERE: Use the chip--flex modifier ***
      span.className = 'chip chip--flex crumb';
      span.setAttribute('data-path', c.path);
      span.title = 'Set as selected directory for navigation';
      if (only && path && eqPath(path, c.path)) span.classList.add('selected');
      const textNode = document.createTextNode(c.name);
      span.appendChild(textNode);
      
      const a = document.createElement('a');
      a.href = `/library?dir=${encodeURIComponent(c.path)}&recursive=false`;
      a.className = 'lib';
      a.title = 'Open in Library';
      a.setAttribute('aria-label','Open in Library');
      a.textContent = 'üìÅ';
      span.appendChild(a);
      
      holder.appendChild(span);
    }
  }

  document.getElementById('dirCrumbs')?.addEventListener('click', (e) => {
    const isLib = e.target.closest('a.lib'); if (isLib) return;
    const chip = e.target.closest('.crumb'); if (!chip) return;
    const p = chip.getAttribute('data-path') || '';
    saveDirState(true, p);
    const navDirOnly = document.getElementById('navDirOnly'); if (navDirOnly) navDirOnly.checked = true;
    renderBreadcrumbs(); refreshNav();
  });
  // Suggestions
  async function fill(field, datalistId) {
    try {
      const res = await fetch(`/api/meta/distinct?field=${encodeURIComponent(field)}&take=100`);
      if (!res.ok) return;
      const arr = await res.json();
      const dl = document.getElementById(datalistId); if (!dl) return;
      dl.innerHTML = "";
      for (const it of arr) {
        const opt = document.createElement("option");
        opt.value = it.value;
        dl.appendChild(opt);
      }
    } catch {}
  }
  function refreshSuggestions(){ fill("studio", "dl-studio"); fill("other", "dl-other"); fill("performers", "dl-performers"); }

  // State
  const srcAllowed = ["Studio","OnlyFans","Amateur","Vintage","Webcam","Spycam","CCTV","Selfie","Social Media","Animated","Unknown"];
  const oriAllowed = ["Gay","Straight","Bi","FtM Trans","MtF Trans"];
  let sourceTypesSel = new Set(@Html.Raw(System.Text.Json.JsonSerializer.Serialize(initSrc)));
  let orientationSel = new Set(@Html.Raw(System.Text.Json.JsonSerializer.Serialize(initOri)));
  let otherTagsArr = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(initOther));
  let performersArr = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(initPerf));
  // Utils
  function badgeFromCount(pc){ if(pc===1) return "Solo"; if(pc===2) return "Duo"; if(pc>=3) return "Group"; return "n/a"; }
  function normToken(s){ return s.trim().replace(/\s+/g,' '); }
  function addToken(arr,t){ const v=normToken(t); if(!v) return; if(!arr.some(x=>x.localeCompare(v,undefined,{sensitivity:'accent'})===0)) arr.push(v); markDirty(); }
  function findIndexCI(arr,t){ return arr.findIndex(x=>x.localeCompare(t,undefined,{sensitivity:'accent'})===0); }
  function removeToken(arr,t){ const i=findIndexCI(arr,t); if(i>=0) arr.splice(i,1); markDirty(); }

  // Save status
  const saveBtn = $("#saveBtn");
  const statusEl = $("#saveStatus");
  let statusFadeTimer = null, statusClearTimer = null;
  function showStatus(text, { autohide = false, delay = 1800 } = {}) {
    if (statusFadeTimer) { clearTimeout(statusFadeTimer); statusFadeTimer = null; }
    if (statusClearTimer) { clearTimeout(statusClearTimer); statusClearTimer = null; }
    statusEl.textContent = text; statusEl.classList.remove("fade");
    if (autohide) {
      statusFadeTimer = setTimeout(() => {
        statusEl.classList.add("fade");
        statusClearTimer = setTimeout(() => { statusEl.textContent = ""; statusEl.classList.remove("fade"); }, 650);
      }, delay);
    }
  }
  let initialSnapshot = null;
  function snapshotDto(){
    const yearV = ($("#year").value || "").trim();
    const pcV = ($("#performerCount").value || "").trim();
    return {
      sourceTypes: [...sourceTypesSel].slice().sort(),
      orientationTags: [...orientationSel].slice().sort(),
      otherTags: otherTagsArr.map(normToken).filter(Boolean).slice().sort(),
      performers: performersArr.map(normToken).filter(Boolean).slice().sort(),
      studioName: ($("#studioName").value || "").trim() || null,
      sourceUsername: ($("#sourceUser").value || "").trim() || null,
      year: yearV ? parseInt(yearV,10) : null,
      performerCount: pcV ? (Number.isNaN(parseInt(pcV,10)) ? null : parseInt(pcV,10)) : null
    };
  }
  function eq(a,b){ return JSON.stringify(a) === JSON.stringify(b); }
  function setSaveState(state){ saveBtn.classList.remove("idle","dirty","saved"); saveBtn.classList.add(state.toLowerCase()); }
  function markDirty(){ if (!initialSnapshot) return; const cur = snapshotDto(); setSaveState(eq(initialSnapshot, cur) ? "idle" : "dirty"); }

  function renderPcButtons(){
    const pc = parseInt($("#performerCount").value || "NaN", 10);
    $$(".pcbtn").forEach(b=>{
      const v = parseInt(b.getAttribute("data-pc"), 10);
      const on = (v === pc);
      b.classList.toggle("on", on);
    });
  }
  function renderTagButtons(){
    $$("#oriGroup .tagbtn").forEach(btn=> btn.classList.toggle("on", orientationSel.has(btn.getAttribute("data-ori"))));
    $$("#srcGroup .tagbtn").forEach(btn=> btn.classList.toggle("on", sourceTypesSel.has(btn.getAttribute("data-src"))));
  }
  function renderOtherChips() {
    const holder = $("#otherChips");
    holder.innerHTML = "";
    const sorted = otherTagsArr.slice().sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base' }));
    sorted.forEach(t => {
        const s = document.createElement("span");
        
        if (t.toLowerCase() === 'x-auto-tagged') {
            s.className = "chip chip--flex autotagged";
        } else {
            s.className = "chip chip--flex other";
        }

        s.textContent = t;
        const x = document.createElement("button");
        x.type = "button";
        x.className = "x";
        x.setAttribute("data-remove-other", t);
        x.textContent = "√ó";
        
        s.appendChild(x);
        holder.appendChild(s);
    });
  }
  function renderPerformerChips(){
    const holder = $("#performerChips"); holder.innerHTML="";
    performersArr.forEach(t=>{
      const s = document.createElement("span"); s.className="chip chip--flex pname"; s.textContent=t;
      const x = document.createElement("button"); x.type="button"; x.className="x"; x.setAttribute("data-remove-perf",t); x.textContent="√ó";
      s.appendChild(x); holder.appendChild(s);
    });
  }

  function makeFilterChip(text, className, href, title){
    const a = document.createElement('a');
    a.className = `chip ${className}`;
    a.href = href;
    a.title = title || `Filter by ${text}`;
    a.setAttribute('aria-label', a.title);
    a.textContent = text;
    return a;
  }

  function renderSummary(){
    const wrap = $("#summaryChips"); if (!wrap) return;
    wrap.innerHTML = "";
    const pcVal = (function(){ const v = parseInt($("#performerCount").value || "NaN", 10); return Number.isNaN(v) ? null : v; })();
    const pcText = (function(pc){ if(pc===1) return "Solo"; if(pc===2) return "Duo"; if(pc>=3) return "Group"; return "n/a"; })(pcVal);
    let pcHref = "";
    if (pcVal === 1) pcHref = `/library?minPerformers=1&maxPerformers=1`;
    else if (pcVal === 2) pcHref = `/library?minPerformers=2&maxPerformers=2`;
    else if (pcVal >= 3) pcHref = `/library?minPerformers=3&maxPerformers=99`;
    const pcChip = makeFilterChip(pcText, "badge perf", pcHref || "#", "Filter by performer count");
    wrap.appendChild(pcChip);

    [...orientationSel].forEach(v => {
      wrap.appendChild(makeFilterChip(v, "ori", `/library?orientation=${encodeURIComponent(v)}`, `Filter by ${v}`));
    });
    [...sourceTypesSel].forEach(v => {
      wrap.appendChild(makeFilterChip(v, "src", `/library?source=${encodeURIComponent(v)}`, `Filter by ${v}`));
    });
    const studio = ($("#studioName").value || "").trim();
    if (studio){
      wrap.appendChild(makeFilterChip(studio, "studio", `/library?source=Studio&q=${encodeURIComponent(studio)}`, `Filter by studio ${studio}`));
    }

    const user = ($("#sourceUser").value || "").trim();
    if (user){
      const prefer = sourceTypesSel.has("OnlyFans") ? "OnlyFans" : (sourceTypesSel.has("Social Media") ? "Social Media" : "");
      const url = prefer ? `/library?source=${encodeURIComponent(prefer)}&q=${encodeURIComponent(user)}` : `/library?q=${encodeURIComponent(user)}`;
      wrap.appendChild(makeFilterChip(user, "user", url, `Filter by source user ${user}`));
    }

    const perfSorted = performersArr.slice().sort((a,b)=>a.localeCompare(b, undefined, {sensitivity:'base'}));
    perfSorted.forEach(name => {
      wrap.appendChild(makeFilterChip(name, "pname", `/library?q=${encodeURIComponent(name)}`, `Filter by performer ${name}`));
    });
    const otherSorted = otherTagsArr.slice().sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base' }));
    otherSorted.forEach(tag => {
        const chipClass = tag.toLowerCase() === 'x-auto-tagged' ? 'autotagged' : 'other';
        wrap.appendChild(makeFilterChip(tag, chipClass, `/library?q=${encodeURIComponent(tag)}`, `Filter by tag ${tag}`));
    });
  }

  function updateConditionals(){
    $("#studioName").disabled = !sourceTypesSel.has("Studio");
    const userOn = sourceTypesSel.has("OnlyFans") || sourceTypesSel.has("Social Media");
    $("#sourceUser").disabled = !userOn;
  }
  function hasAnyEditData(){
    const hasYear   = !!($("#year")?.value || "").trim();
    const hasPC     = !!($("#performerCount")?.value || "").trim();
    const hasStudio = !!($("#studioName")?.value || "").trim();
    const hasUser   = !!($("#sourceUser")?.value || "").trim();
    const hasSrc    = sourceTypesSel.size > 0;
    const hasOri    = orientationSel.size > 0;
    const hasOther  = otherTagsArr.length > 0;
    const hasPerf   = performersArr.length > 0;
    return hasYear || hasPC || hasStudio || hasUser || hasSrc || hasOri || hasOther || hasPerf;
  }

  async function refreshNav(){
    const prevA = document.getElementById("navPrev");
    const nextA = document.getElementById("navNext");
    if (!prevA || !nextA) return;

    const u = document.getElementById("navUntagged")?.checked === true;
    const t = document.getElementById("navTagged")?.checked === true;
    const { only: dirOnly, path: dirPath } = loadDirState();
    function setNavLink(a, targetId, enabledTitle, disabledTitle){
      if (targetId != null) {
        a.href = `/media/${targetId}`;
        a.classList.remove("disabled");
        a.removeAttribute("aria-disabled");
        a.removeAttribute("tabindex");
        if (enabledTitle) a.title = enabledTitle;
      } else {
        a.href = "#";
        a.classList.add("disabled");
        a.setAttribute("aria-disabled","true");
        a.setAttribute("tabindex","-1");
        if (disabledTitle) a.title = disabledTitle;
      }
    }

    try{
      let url = `/api/media/nav?id=${id}&untaggedOnly=${u ? "true" : "false"}&taggedOnly=${t ? "true" : "false"}`;
      if (dirOnly && dirPath) { url += `&dir=${encodeURIComponent(dirPath)}&recursive=false`; }

      const r = await fetch(url);
      if(!r.ok){
        setNavLink(prevA, null, null, "Navigation not available");
        setNavLink(nextA, null, null, "Navigation not available");
        return;
      }
      const j = await r.json();
      const prevId = j?.prevId ?? null;
      const nextId = j?.nextId ?? null;
      setNavLink(prevA, prevId, "Previous", "No previous item");
      setNavLink(nextA, nextId, "Next",     "No next item");
    } catch {
      setNavLink(prevA, null, null, "Navigation not available");
      setNavLink(nextA, null, null, "Navigation not available");
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    refreshSuggestions();
    renderTagButtons(); renderPcButtons(); renderOtherChips(); renderPerformerChips(); renderSummary(); updateConditionals();

    const box = document.getElementById("editBox");
    const label = document.getElementById("editSummaryText");
    function refreshEditSummary(){ if (!box || !label) return; label.textContent = box.open ? "Hide details" : "Edit details (click to open)"; }
    if (box && label) {
      const anyData = hasAnyEditData();
      box.open = !anyData;
      refreshEditSummary();
      box.addEventListener("toggle", refreshEditSummary);
    }

    initialSnapshot = snapshotDto();
    setSaveState("idle");

    const navUntagged = document.getElementById("navUntagged");
    const navTagged   = document.getElementById("navTagged");
    const navDirOnly  = document.getElementById("navDirOnly");
    (function initSticky(){
      const { u, t } = loadFilterState();
      if (navUntagged) navUntagged.checked = u;
      if (navTagged)   navTagged.checked   = t;

      const { only, path } = loadDirState();
      if (navDirOnly) {
        navDirOnly.checked = only;
        if (only && !path) saveDirState(true, currentParentDir());
      }
    })();
    renderBreadcrumbs();
    function applyMutualExclusivity(changed){
      if (!navUntagged || !navTagged) return;
      if (changed === "u" && navUntagged.checked) { navTagged.checked = false; }
      if (changed === "t" && navTagged.checked)   { navUntagged.checked = false; }
      saveFilterState(navUntagged.checked, navTagged.checked);
      refreshNav();
    }
    navUntagged?.addEventListener("change", () => applyMutualExclusivity("u"));
    navTagged  ?.addEventListener("change", () => applyMutualExclusivity("t"));

    navDirOnly?.addEventListener("change", () => {
      const on = navDirOnly.checked;
      if (on && !loadDirState().path) saveDirState(true, currentParentDir());
      else saveDirState(on, loadDirState().path);
      renderBreadcrumbs(); refreshNav();
    });
    refreshNav();
    
    $("#navRandom").addEventListener("click", async () => {
        const { only: dirOnly, path: dirPath } = loadDirState();
        let url = `/api/media/browse?random=1`;
        if (dirOnly && dirPath) {
            url += `&dir=${encodeURIComponent(dirPath)}`;
        }
        
        try {
          const res = await fetch(url);
            if (!res.ok) {
                if (res.status === 404) { throw new Error("No files match the current directory filter."); }
                throw new Error("Could not find a random file.");
            }
            const data = await res.json();
            if (data && data.id) {
                if (data.id === id) {
                    $("#navRandom").click();
                    return;
                }
                window.location.href = `/media/${data.id}`;
            }
        } catch (e) {
            alert(e.message || "An error occurred.");
        }
    });

    document.addEventListener("click", (e) => {
      const btn = e.target.closest('.pcbtn'); if (!btn) return;
      $("#performerCount").value = String(parseInt(btn.getAttribute("data-pc"),10));
      renderPcButtons(); renderSummary(); markDirty();
    });
    $("#performerCount").addEventListener("input", ()=>{ renderPcButtons(); renderSummary(); markDirty(); });

    $("#oriGroup").addEventListener("click", (e)=>{
      const btn = e.target.closest('.tagbtn'); if (!btn) return;
      const val = btn.getAttribute("data-ori"); if (!val) return;
      if (orientationSel.has(val)) orientationSel.delete(val); else orientationSel.add(val);
      renderTagButtons(); renderSummary(); markDirty();
    });
    $("#srcGroup").addEventListener("click", (e)=>{
      const btn = e.target.closest('.tagbtn'); if (!btn) return;
      const val = btn.getAttribute("data-src"); if (!val) return;
      if (sourceTypesSel.has(val)) sourceTypesSel.delete(val); else sourceTypesSel.add(val);
      renderTagButtons(); renderSummary(); updateConditionals(); markDirty();
    });
    ["#year","#studioName","#sourceUser"].forEach(sel => { const el = document.querySelector(sel); el?.addEventListener("input", () => { renderSummary(); markDirty(); }); });
    const otherInput = $("#otherTagsInput");
    otherInput.addEventListener("keydown", (e)=>{
      if (e.key === "," || e.key === "Enter") {
        e.preventDefault();
        const v = otherInput.value;
        if (v.trim() !== "") { addToken(otherTagsArr, v); otherInput.value = ""; renderOtherChips(); renderSummary(); }
      }
    });
    $("#otherChips").addEventListener("click", (e)=>{
      const btn = e.target.closest('button[data-remove-other]'); if (!btn) return;
      removeToken(otherTagsArr, btn.getAttribute('data-remove-other')); renderOtherChips(); renderSummary(); markDirty();
    });
    const perfInput = $("#performersInput");
    perfInput.addEventListener("keydown", (e)=>{
      if (e.key === "," || e.key === "Enter") {
        e.preventDefault();
        const v = perfInput.value;
        if (v.trim() !== "") { addToken(performersArr, v); perfInput.value=""; renderPerformerChips(); renderSummary(); markDirty(); }
      }
    });
    $("#performerChips").addEventListener("click", (e)=>{
      const btn = e.target.closest('button[data-remove-perf]'); if (!btn) return;
      removeToken(performersArr, btn.getAttribute('data-remove-perf')); renderPerformerChips(); renderSummary(); markDirty();
    });
  });

  saveBtn.addEventListener("click", async (e) => {
    e.stopPropagation();
    saveBtn.disabled = true;
    statusEl.textContent = "saving‚Ä¶";
    const dto = {
      sourceTypes: Array.from(sourceTypesSel),
      studioName: ($("#studioName").value || "").trim() || null,
      sourceUsername: ($("#sourceUser").value || "").trim() || null,
      year: (function(v){ v=v.trim(); return v ? parseInt(v,10) : null; })($("#year").value || ""),
      orientationTags: Array.from(orientationSel),
      otherTags: otherTagsArr.join(", "),
      performers: performersArr.join(", "),
      performerCount: (function(v){ v=v.trim(); if(!v) return null; const n=parseInt(v,10); return Number.isNaN(n)? null : n; })($("#performerCount").value || "")
    };
    try {
      const resp = await fetch(`/api/media/${id}`, { method:"PUT", headers:{ "Content-Type":"application/json" }, body: JSON.stringify(dto) });
      if (!resp.ok) throw new Error(await resp.text() || ("HTTP " + resp.status));
      showStatus("Saved ‚úì", { autohide: true, delay: 1800 });
      initialSnapshot = snapshotDto();
      setSaveState("saved");
      setTimeout(()=> setSaveState("idle"), 1500);
      refreshSuggestions();
    } catch (e2) {
      showStatus("Error: " + (e2?.message || String(e2)));
    } finally {
      saveBtn.disabled = false;
    }
  });

  (function(){
    const btn = document.getElementById("autoTagBtn");
    const status = document.getElementById("autoTagStatus");
    if (!btn) return;
    btn.addEventListener("click", async ()=>{
      btn.disabled = true;
      status.textContent = "auto-tagging‚Ä¶";
      try{
        const resp = await fetch(`/api/media/${id}/autotag`, { method: "POST" });
        if (!resp.ok) throw new Error(await resp.text() || ("HTTP " + resp.status));
        const r = await resp.json();
 
        const after = r.after || {};
        sourceTypesSel = new Set(after.sourceTypes || []);
        otherTagsArr = Array.isArray(after.otherTags) ? after.otherTags.slice() : [];
        document.getElementById("studioName").value = after.studioName || "";
        document.getElementById("sourceUser").value = after.sourceUsername || "";
        renderTagButtons(); renderOtherChips(); renderSummary(); updateConditionals();
        initialSnapshot = snapshotDto();
        setSaveState("saved");
        status.textContent = (r.updated ? "auto-tagged ‚úì" : "no changes");
        setTimeout(()=> { setSaveState("idle"); status.textContent=""; }, 2000);
        refreshSuggestions();
      } catch(err) {
        status.textContent = "auto-tag error: " + (err?.message || err);
      } finally { btn.disabled = false; }
    });
  })();
</script>

<script>
/* Player wiring (thumbnail toggle, open/reveal) */
(function(){
  const thumb = document.getElementById("vi_thumb");
  const video = document.getElementById("vi_video");
  const toggle = document.getElementById("vi_toggle");
  const openBtn = document.getElementById("vi_open");
  const revealBtn = document.getElementById("vi_reveal");
  const backBtn = document.getElementById("vi_back2thumb");
  const status = document.getElementById("vi_status");

  if (!thumb || !video) return;

  const streamUrl = `/api/media/${id}/stream`;

  function showVideo(){
    thumb.style.display = "none";
    video.src = streamUrl;
    video.style.display = "";
    backBtn.style.display = "";
    toggle.textContent = "Stop";
    video.play().catch(()=>{ status.textContent = "Couldn‚Äôt start playback (codec/permissions)."; });
  }
  
  function showThumb(){
    try { video.pause(); } catch {}
    video.removeAttribute("src"); video.load();
    video.style.display = "none";
    backBtn.style.display = "none";
    thumb.style.display = "";
    toggle.textContent = "‚ñ∂";
    status.textContent = "";
  }

  toggle.addEventListener("click", ()=>{ (thumb.style.display !== "none") ? showVideo() : showThumb(); });
  thumb.addEventListener("click", showVideo);
  backBtn.addEventListener("click", showThumb);
  async function postJson(url){
    const r = await fetch(url, { method:"POST" });
    if (!r.ok) throw new Error(`HTTP ${r.status}`);
    return r.json().catch(()=> ({}));
  }
  openBtn.addEventListener("click", async ()=>{
    status.textContent = "Opening in default player‚Ä¶";
    try { await postJson(`/api/media/${id}/open`); status.textContent = "Opened."; }
    catch{ status.textContent = "Failed to open."; }
  });
  revealBtn.addEventListener("click", async ()=>{
    status.textContent = "Revealing in Explorer‚Ä¶";
    try { await postJson(`/api/media/${id}/reveal`); status.textContent = "Revealed."; }
    catch{ status.textContent = "Failed to reveal."; }
  });
  video.addEventListener("error", () => {
    status.textContent = "Browser couldn't play this file. Try \"Open in player\".";
  });
})();
</script>

<script>
/* Arrow key navigation (disabled while editing inputs or when the player is playing) */
(function(){
  function isEditableTarget(el){ if (!el) return false; const t = el.tagName?.toLowerCase(); if (t==='input'||t==='textarea'||t==='select') return true; if (el.isContentEditable) return true; if (el.getAttribute&&el.getAttribute('role')==='textbox') return true; return false; }
  function isPlayerActive(){ const video=document.getElementById('vi_video'); if (!video) return false; const visible = video.style.display !== 'none'; const playing = typeof video.paused === 'boolean' ? !video.paused && !video.ended : visible; return visible && playing; }
  function isEnabledLink(a){ return a && !a.classList.contains('disabled') && a.getAttribute('href') && a.getAttribute('href') !== '#'; }
  document.addEventListener('keydown', (e) => {
    if (isEditableTarget(e.target) || 
    isPlayerActive()) return;
    if (e.key === 'ArrowLeft') { const prevA = document.getElementById('navPrev'); if (isEnabledLink(prevA)) { e.preventDefault();
    window.location.href = prevA.href; } }
    else if (e.key === 'ArrowRight') { const nextA = document.getElementById('navNext');
    if (isEnabledLink(nextA)) { e.preventDefault(); window.location.href = nextA.href; } }
  }, { passive: false });
})();
</script>

<script>
/* Aspect Ratio Toggle Logic */
(function(){
  const playerBox = document.querySelector(".player-box");
  const toggleBtn = document.getElementById("vi_aspect_toggle");

  if (!playerBox || !toggleBtn) return;

  toggleBtn.addEventListener("click", (e) => {
    e.stopPropagation(); // Prevents the play overlay from triggering
    playerBox.classList.toggle("aspect-1-1");
  });
})();
</script>

<script>
/* Player Controls Fade Logic */
(function(){
    const playerBox = document.querySelector(".player-box");
    const controls = document.querySelector(".player-button-group");
    let fadeTimeout = null;

    if (!playerBox || !controls) return;

    function showControls() {
        clearTimeout(fadeTimeout);
        controls.classList.add('visible');
    }

    function hideControls() {
        fadeTimeout = setTimeout(() => {
            controls.classList.remove('visible');
        }, 2000); // Hide after 2 seconds of inactivity
    }

    playerBox.addEventListener("mouseenter", showControls);
    playerBox.addEventListener("mousemove", () => {
        showControls();
        hideControls();
    });
    playerBox.addEventListener("mouseleave", hideControls);

    // Initially hide controls
    hideControls();
})();
</script>

@await Html.PartialAsync("_TopNavEnd")
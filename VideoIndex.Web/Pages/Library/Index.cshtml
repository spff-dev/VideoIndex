@page "/library"
@model VideoIndex.Web.Pages.Library.IndexModel

@{
    ViewData["Title"] = "Library";
}

@await Html.PartialAsync("_TopNav")

<h1>Library</h1>

<div class="library-toolbar-container">
    <details class="library-toolbar" open>
        <summary>
            <span class="summary-text">Hide Filters</span>
        </summary>
        <div id="filtersWrap" class="library-filters">

            <fieldset class="filter-panel perf">
                <legend>Number of Performers</legend>
                <div>
                    <div class="hstack">
                        <input id="minPerf" type="number" min="0" placeholder="min" style="width:5rem">
                        <input id="maxPerf" type="number" min="0" placeholder="max" style="width:5rem">
                    </div>
                    <div class="hstack" style="margin-top: 0.5rem;">
                        <button type="button" class="tagbtn quick-perf" data-min="1" data-max="99">All</button>
                        <button type="button" class="tagbtn quick-perf" data-min="1" data-max="1">Solo</button>
                        <button type="button" class="tagbtn quick-perf" data-min="2" data-max="2">Duo</button>
                        <button type="button" class="tagbtn quick-perf" data-min="3" data-max="99">Group</button>
                    </div>
                </div>
            </fieldset>

            <fieldset class="filter-panel ori">
                <legend>Orientation</legend>
                <div>
                    <div class="hstack" id="oriGroup">
                        <button type="button" class="tagbtn" data-ori="Gay">Gay</button>
                        <button type="button" class="tagbtn" data-ori="Straight">Straight</button>
                        <button type="button" class="tagbtn" data-ori="Bi">Bi</button>
                        <button type="button" class="tagbtn" data-ori="FtM Trans">FtM Trans</button>
                        <button type="button" class="tagbtn" data-ori="MtF Trans">MtF Trans</button>
                    </div>
                </div>
            </fieldset>

            <fieldset class="filter-panel src">
                <legend>
                    <span>Source Type</span>
                    <div class="logic-toggle" id="sourceLogicToggle">
                        <button type="button" data-logic="OR" class="active">OR</button>
                        <button type="button" data-logic="AND">AND</button>
                    </div>
                </legend>
                <div>
                    <div class="hstack" id="srcGroup">
                        <button type="button" class="tagbtn" data-src="Studio">Studio</button>
                        <button type="button" class="tagbtn" data-src="OnlyFans">OnlyFans</button>
                        <button type="button" class="tagbtn" data-src="Amateur">Amateur</button>
                        <button type="button" class="tagbtn" data-src="Vintage">Vintage</button>
                        <button type="button" class="tagbtn" data-src="Webcam">Webcam</button>
                        <button type="button" class="tagbtn" data-src="Spycam">Spycam</button>
                        <button type="button" class="tagbtn" data-src="CCTV">CCTV</button>
                        <button type="button" class="tagbtn" data-src="Selfie">Selfie</button>
                        <button type="button" class="tagbtn" data-src="Social Media">Social Media</button>
                        <button type="button" class="tagbtn" data-src="Animated">Animated</button>
                        <button type="button" class="tagbtn" data-src="Unknown">Unknown</button>
                    </div>
                </div>
            </fieldset>

            <fieldset class="filter-panel actions">
                <legend>Actions</legend>
                <div>
                     <div class="field">
                        <label class="hstack" style="font-weight:normal; cursor:pointer;">
                            <input id="favOnly" type="checkbox"/>
                            <span>Favourites only ‚≠êÔ∏è</span>
                        </label>
                    </div>
                    <div class="hstack search-wrapper">
                        <input id="searchBox" type="text" placeholder="Search...">
                    </div>
                    <div class="sort-control">
                        <label>Sort</label>
                        <select id="sortSel">
                            <option value="updated_desc">Updated (newest)</option>
                            <option value="updated_asc">Updated (oldest)</option>
                            <option value="size_desc">Size (largest)</option>
                            <option value="size_asc">Size (smallest)</option>
                            <option value="length_desc">Length (longest)</option>
                            <option value="length_asc">Length (shortest)</option>
                            <option value="year_desc">Year (newest)</option>
                            <option value="year_asc">Year (oldest)</option>
                        </select>
                    </div>
                    <div class="hstack" style="margin-top:1rem; justify-content: space-between;">
                        <button id="resetAll" class="btn ghost small" type="button" title="Clear all filters">‚ùå Clear</button>
                        <button id="randomBtn" class="btn ghost small" type="button" title="Feeling Lucky">üîÄ Random</button>
                    </div>
                </div>
            </fieldset>

        </div>
    </details>
</div>

<div id="activeFiltersSummary" class="hstack" style="margin: -0.5rem 0 1.5rem; padding: 0 1rem;"></div>

<div id="scopeBar" class="hstack" style="margin:4px 0 10px 0;"></div>

<div class="hstack" style="justify-content:space-between; margin:10px 0; align-items: flex-end;">
    <div>
        <div><b id="totalCount">0</b> total</div>
        <div class="muted">Showing <span id="shownCount">0</span></div>
    </div>
    <div class="view-options hstack">
        <div class="field">
            <label for="gridCols">Items per row</label>
            <select id="gridCols">
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
                <option value="6" selected>6</option>
                <option value="7">7</option>
                <option value="8">8</option>
            </select>
        </div>
        <div class="field">
            <label for="pageSize">Items per page</label>
            <select id="pageSize">
                <option value="12">12</option>
                <option value="24">24</option>
                <option value="36" selected>36</option>
                <option value="48">48</option>
                <option value="72">72</option>
            </select>
        </div>
    </div>
</div>

<div id="grid" class="library-grid"></div>

<div style="margin-top:12px;">
    <button id="loadMore" class="btn">Load more</button>
    <span id="status" class="muted" style="margin-left:.5rem;"></span>
</div>

<script>
    const $ = s => document.querySelector(s);
    const $$ = s => Array.from(document.querySelectorAll(s));

    let take = 36;
    const LS_KEY_SRC_LOGIC = "vi_source_logic";
    const LS_KEY_GRID_COLS = "vi_grid_cols";
    const LS_KEY_PAGE_SIZE = "vi_page_size";

    let srcSel = new Set();
    let oriSel = new Set();
    let sourceLogic = localStorage.getItem(LS_KEY_SRC_LOGIC) || "OR";
    let skip = 0;
    let total = 0;

    function getParams() { return new URL(location.href).searchParams; }

    function applyGridSize(cols) {
        const grid = $("#grid");
        if (grid) {
            grid.style.setProperty("--grid-cols", cols);
        }
    }

    function setParams(updates) {
        const u = new URL(location.href);
        ["source", "orientation", "minPerformers", "maxPerformers", "sort", "skip", "q", "sourceLogic", "favouritesOnly"].forEach(k => u.searchParams.delete(k));
        for (const [k, v] of Object.entries(updates)) {
            if (v === null || v === undefined || v === "" || v === false || (Array.isArray(v) && v.length === 0)) continue;
            u.searchParams.set(k, Array.isArray(v) ? v.join(",") : String(v));
        }
        history.replaceState({}, "", u.toString());
    }

    function clearFolderFilterInUrl() {
        const u = new URL(location.href);
        u.searchParams.delete("dir");
        u.searchParams.delete("recursive");
        history.replaceState({}, "", u.toString());
        renderScopeBar();
    }

    function getFolderFilterFromUrl() {
        const sp = getParams();
        return { dir: sp.get("dir") || "", recursive: (sp.get("recursive") || "false").toLowerCase() === "true" };
    }

    function quickPerfMatches(btn) {
        const minInput = ($("#minPerf").value ?? "").trim();
        const maxInput = ($("#maxPerf").value ?? "").trim();
        const btnMin = btn.dataset.min ?? "";
        const btnMax = btn.dataset.max ?? "";

        // The "All" button is active if both inputs are empty
        if (btnMin === "1" && btnMax === "99") {
            return minInput === "" && maxInput === "";
        }

        // For other buttons, the values must match exactly
        return btnMin === minInput && btnMax === maxInput;
    }

    function updateQuickPerfButtons() {
        $$(".quick-perf").forEach(b => b.classList.toggle("on", quickPerfMatches(b)));
    }

    function readFromUrl() {
        const sp = getParams();
        (sp.get("source") || "").split(",").filter(Boolean).forEach(v => srcSel.add(v.trim()));
        (sp.get("orientation") || "").split(",").filter(Boolean).forEach(v => oriSel.add(v.trim()));
        $("#minPerf").value = sp.get("minPerformers") || "";
        $("#maxPerf").value = sp.get("maxPerformers") || "";
        $("#sortSel").value = sp.get("sort") || "updated_desc";
        $("#favOnly").checked = sp.get("favouritesOnly") === 'true';
        skip = parseInt(sp.get("skip") || "0", 10);
        if (Number.isNaN(skip) || skip < 0) skip = 0;
        $("#searchBox").value = sp.get("q") || "";
        $$("#srcGroup .tagbtn").forEach(b => b.classList.toggle("on", srcSel.has(b.dataset.src)));
        $$("#oriGroup .tagbtn").forEach(b => b.classList.toggle("on", oriSel.has(b.dataset.ori)));
        updateQuickPerfButtons();
    }

    const norm = it => ({
        Id: it.Id ?? it.id,
        Filename: it.Filename ?? it.filename,
        Title: it.Title ?? it.title,
        IsFavourite: it.IsFavourite ?? it.isFavourite ?? false,
        SizeHuman: it.SizeHuman ?? it.sizeHuman,
        LengthHuman: it.LengthHuman ?? it.lengthHuman,
        LengthSeconds: it.LengthSeconds ?? it.lengthSeconds,
        Width: it.Width ?? it.width,
        Height: it.Height ?? it.height,
        Year: it.Year ?? it.year,
        PerformerCount: it.PerformerCount ?? it.performerCount,

        // ‚Üì add the camelCase fallbacks
        SourceTypes: it.SourceTypes ?? it.sourceTypes ?? [],
        OrientationTags: it.OrientationTags ?? it.orientationTags ?? [],
        OtherTags: it.OtherTags ?? it.otherTags ?? [],

        StudioName: it.StudioName ?? it.studioName,
        UpdatedAt: it.UpdatedAt ?? it.updatedAt,
        Thumb: it.Thumb ?? it.thumb
      });

    const escapeHtml = s => (s ?? "").toString().replace(/[&<>"']/g, c => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#039;' }[c]));

    function card(raw) {
        const item = norm(raw);
        const titleOrFile = item.Title || item.Filename;
        const res = (item.Width && item.Height) ? `${item.Width}√ó${item.Height}` : "‚Äî";
        const len = item.LengthHuman ?? "‚Äî";
        const favIcon = item.IsFavourite ? ' <span class="fav-star">‚≠êÔ∏è</span>' : '';
        const statsHtml = `<span class="chip meta">${escapeHtml(item.SizeHuman)}</span> <span class="chip meta">${len}</span> <span class="chip meta">${res}</span>`;
        // --- Build the tags line ---
                const pc = item.PerformerCount;
        const perfBadge = (pc === 1) ? "Solo" : (pc === 2) ? "Duo" : (pc >= 3) ?
        "Group" : "";
                
        const tags = [];
        if (perfBadge) {
                    tags.push(`<span class="chip perf clickable" data-min="${pc}" data-max="${pc}">${perfBadge}</span>`);
        }
                (item.OrientationTags || []).forEach(t => {
                    tags.push(`<span class="chip ori clickable" data-ori="${escapeHtml(t)}">${escapeHtml(t)}</span>`);
                });
        (item.SourceTypes || []).forEach(t => {
                    tags.push(`<span class="chip src clickable" data-src="${escapeHtml(t)}">${escapeHtml(t)}</span>`);
                });
        // Combine all tags into a single meta div, but only if there are any tags.
        const tagHtml = tags.length > 0 ? `<div class="meta">${tags.join(" ")}</div>` : "";
        return `<a class="library-card" href="/media/${item.Id}">
                            <div class="thumb-container">
                                <img class="thumb-bg" src="${item.Thumb}" alt="" loading="lazy">
                                <img class="thumb" src="${item.Thumb}" alt="thumb" loading="lazy" onerror="this.style.display='none'">
                          
        </div>
                            <div class="title"><span class="title-text">${escapeHtml(titleOrFile)}</span>${favIcon}</div>
                            <div class="meta">${statsHtml}</div>
                            ${tagHtml}
                        </a>`;
        }

    function updateCounts(shownAdd) {
        const shown = skip + (shownAdd || 0);
        const shownEl = $("#shownCount");
        if (shownEl) {
            // Now it also shows the 'take' value
            shownEl.parentElement.innerHTML = `Showing <span id="shownCount">${Math.min(shown, total)}</span> of ${take} per page`;
        }
        $("#totalCount").textContent = total;
    }

    function renderScopeBar() {
        const { dir, recursive } = getFolderFilterFromUrl();
        const bar = $("#scopeBar");
        if (!bar || !dir) { if (bar) bar.innerHTML = ''; return; }
        const breakable = escapeHtml(dir).replace(/([\\/])/g, '$1&#8203;');
        bar.innerHTML = `<span class="chip chip--flex folder" title="${dir}">üìÅ <span class="path">${breakable}</span> ${recursive ? "(+ subfolders)" : ""} <button type="button" id="clearFolderFilter" class="x" title="Clear folder filter">√ó</button></span>`;
        $("#clearFolderFilter")?.addEventListener("click", () => { clearFolderFilterInUrl(); reload(true); });
    }

    function renderActiveFilterSummary() {
        const container = $("#activeFiltersSummary");
        container.innerHTML = '';
        const createChip = (text, type, removeAction) => {
            const chip = document.createElement('span');
            chip.className = `chip chip--flex ${type}`;
            chip.textContent = text;
            const x = document.createElement('button');
            x.type = 'button'; x.className = 'x'; x.innerHTML = '&times;'; x.title = `Remove: ${text}`;
            x.onclick = removeAction;
            chip.appendChild(x);
            container.appendChild(chip);
        };
        const q = ($("#searchBox").value ?? "").trim();
        if (q) createChip(`Search: "${q}"`, 'actions', () => { $("#searchBox").value = ''; reload(); });
        
        if ($("#favOnly").checked) {
            createChip('Favourites Only ‚≠êÔ∏è', 'actions', () => {
                $("#favOnly").checked = false; reload();
            });
        }
        
        const minP = $("#minPerf").value.trim();
        const maxP = $("#maxPerf").value.trim();

        if (minP || maxP) {
            let text = ""; // The text for the chip

            // Case 1: Both min and max are specified
            if (minP && maxP) {
                if (minP === "1" && maxP === "1")   text = "Solo";
                else if (minP === "2" && maxP === "2")   text = "Duo";
                else if (minP === "3" && maxP === "99")  text = "Group";
                else if (minP === maxP)                  text = `${minP} performers`;
                else                                     text = `${minP} to ${maxP} performers`;
            }
            // Case 2: Only min is specified
            else if (minP) {
                if (minP === "1")                        text = "At least 1 performer";
                else                                     text = `${minP}+ performers`;
            }
            // Case 3: Only max is specified
            else if (maxP) {
                if (maxP === "1")                        text = "Solo";
                else                                     text = `Up to ${maxP} performers`;
            }

            createChip(`Performers: ${text}`, 'perf', () => { 
                $("#minPerf").value = ''; 
                $("#maxPerf").value = ''; 
                reload(); 
            });
        } else {
            // If no min/max is set, "All" is the active filter
            createChip('Performers: All', 'perf', () => { /* No action needed to remove */ });
        }
        
        [...oriSel].forEach(val => createChip(val, 'ori', () => { oriSel.delete(val); reload(); }));
        [...srcSel].forEach(val => createChip(val, 'src', () => { srcSel.delete(val); reload(); }));
        
        container.style.display = container.children.length > 0 ? 'flex' : 'none';
    }

    function getActiveFilterParams() {
        const params = new URLSearchParams({ sourceLogic });
        const q = ($("#searchBox").value ?? "").trim();
        if (q) params.set("q", q);
        if ($("#favOnly").checked) params.set("favouritesOnly", "true");
        if (srcSel.size) params.set("source", [...srcSel].join(","));
        if (oriSel.size) params.set("orientation", [...oriSel].join(","));
        const minP = $("#minPerf").value.trim(); if (minP) params.set("minPerformers", minP);
        const maxP = $("#maxPerf").value.trim(); if (maxP) params.set("maxPerformers", maxP);
        const { dir, recursive } = getFolderFilterFromUrl();
        if (dir) { params.set("dir", dir); params.set("recursive", String(recursive)); }
        return params;
    }

    async function fetchPage(append = false) {
        $("#status").textContent = "loading‚Ä¶";
        $("#loadMore").disabled = true;
        const params = getActiveFilterParams();
        params.set("skip", String(skip));
        params.set("take", String(take));
        params.set("sort", $("#sortSel").value);
        try {
            const res = await fetch(`/api/media/browse?${params.toString()}`);
            if (!res.ok) throw new Error(`HTTP ${res.status}`);
            const data = await res.json();
            total = data.total ?? 0;
            const grid = $("#grid");
            if (!append) grid.innerHTML = "";
            grid.insertAdjacentHTML("beforeend", (data.items || []).map(card).join(""));
            $("#loadMore").disabled = (skip + (data.items?.length || 0) >= total);
            $("#status").textContent = (skip + (data.items?.length || 0) >= total) ? "end of results" : "";
            updateCounts(data.items?.length);
        } catch (e) {
            $("#status").textContent = "error: " + (e.message || e);
        }
    }

    function reload(resetSkip = true) {
        if (resetSkip) skip = 0;
        setParams({
            source: [...srcSel], orientation: [...oriSel],
            minPerformers: $("#minPerf").value.trim() || null, maxPerformers: $("#maxPerf").value.trim() || null,
            sort: $("#sortSel").value, q: ($("#searchBox").value ?? "").trim() || null,
            favOnly: $("#favOnly").checked,
            skip: resetSkip ? 0 : skip
        });
        $$("#srcGroup .tagbtn").forEach(b => b.classList.toggle("on", srcSel.has(b.dataset.src)));
        $$("#oriGroup .tagbtn").forEach(b => b.classList.toggle("on", oriSel.has(b.dataset.ori)));
        updateQuickPerfButtons();
        renderScopeBar();
        renderActiveFilterSummary();
        fetchPage(false);
    }

    function resetAll() {
        srcSel.clear(); oriSel.clear();
        $("#minPerf").value = ""; $("#maxPerf").value = "";
        $("#sortSel").value = "updated_desc"; $("#searchBox").value = "";
        $("#favOnly").checked = false;
        clearFolderFilterInUrl();
        reload(true);
    }

    const debounce = (fn, ms) => { let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn.apply(this, args), ms); }; };
    const scrollTopSmooth = () => window.scrollTo({ top: 0, behavior: 'smooth' });

    document.addEventListener("DOMContentLoaded", () => {
        readFromUrl();
        reload(false);

        const gridColsSelect = $("#gridCols");
        const pageSizeSelect = $("#pageSize");

        // Load saved settings or use defaults
        const savedCols = localStorage.getItem(LS_KEY_GRID_COLS) || "6";
        const savedPageSize = localStorage.getItem(LS_KEY_PAGE_SIZE) || "36";

        // Apply settings
        gridColsSelect.value = savedCols;
        pageSizeSelect.value = savedPageSize;
        take = parseInt(savedPageSize, 10);
        applyGridSize(savedCols);

        // Add event listeners
        gridColsSelect.addEventListener("change", () => {
            const newCols = gridColsSelect.value;
            localStorage.setItem(LS_KEY_GRID_COLS, newCols);
            applyGridSize(newCols);
            // No reload needed as it's just a visual change
        });

        pageSizeSelect.addEventListener("change", () => {
            const newPageSize = pageSizeSelect.value;
            localStorage.setItem(LS_KEY_PAGE_SIZE, newPageSize);
            take = parseInt(newPageSize, 10);
            reload(true); // Reload data with new page size
        });

        const sourceLogicToggle = $("#sourceLogicToggle");
        $$('#sourceLogicToggle button').forEach(btn => btn.classList.toggle('active', btn.dataset.logic === sourceLogic));
        sourceLogicToggle.addEventListener("click", e => {
            const btn = e.target.closest('button'); if (!btn) return;
            sourceLogic = btn.dataset.logic;
            localStorage.setItem(LS_KEY_SRC_LOGIC, sourceLogic);
            $$('#sourceLogicToggle button').forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            reload();
        });

          $("#filtersWrap").addEventListener("click", e => {
              const btn = e.target.closest('.tagbtn, .quick-perf');
              if (!btn) return;

              if (btn.matches('.quick-perf')) {
                  // Check if the "All" button was clicked
                  if (btn.dataset.min === "1" && btn.dataset.max === "99") {
                      // The "All" button should always clear the filter
                      $("#minPerf").value = "";
                      $("#maxPerf").value = "";
                  } else {
                      // For other buttons (Solo, Duo, Group), use the existing toggle behavior
                      if (quickPerfMatches(btn)) {
                          $("#minPerf").value = "";
                          $("#maxPerf").value = "";
                      } else {
                          $("#minPerf").value = btn.dataset.min ?? "";
                          $("#maxPerf").value = btn.dataset.max ?? "";
                      }
                  }
              } else if (btn.dataset.ori) {
                  const v = btn.dataset.ori;
                  if (oriSel.has(v)) oriSel.delete(v);
                  else oriSel.add(v);
              } else if (btn.dataset.src) {
                  const v = btn.dataset.src;
                  if (srcSel.has(v)) srcSel.delete(v);
                  else srcSel.add(v);
              }
              reload();
          });

        $("#grid").addEventListener("click", e => {
            const chip = e.target.closest(".chip.clickable"); if (!chip) return;
            e.preventDefault(); e.stopPropagation();
            if (chip.dataset.src && !srcSel.has(chip.dataset.src)) srcSel.add(chip.dataset.src);
            if (chip.dataset.ori && !oriSel.has(chip.dataset.ori)) oriSel.add(chip.dataset.ori);
            if (chip.dataset.min) { $("#minPerf").value = chip.dataset.min; $("#maxPerf").value = chip.dataset.max; }
            reload();
        });
        
        $$("#minPerf, #maxPerf, #sortSel, #favOnly").forEach(el => el.addEventListener("change", () => reload()));
        $("#searchBox").addEventListener("input", debounce(() => reload(), 300));
        
        $("#loadMore").addEventListener("click", () => {
            skip += take;
            setParams({ ...Object.fromEntries(getActiveFilterParams()), skip });
            fetchPage(true);
        });
        
        $("#resetAll").addEventListener("click", resetAll);
        $("#randomBtn").addEventListener("click", async () => {
            const params = getActiveFilterParams(); params.set("random", "1");
            try {
                const res = await fetch(`/api/media/browse?${params.toString()}`);
                if (!res.ok) throw new Error(res.status === 404 ? "No files match filters." : "Could not find a random file.");
                const data = await res.json();
                if (data?.id) window.location.href = `/media/${data.id}`;
            } catch (e) { alert(e.message || "An error occurred."); }
        });

        const toolbar = document.querySelector('.library-toolbar');
        const summaryText = document.querySelector('.summary-text');
        if (toolbar && summaryText) {
            const isToolbarOpen = localStorage.getItem('vi_toolbar_open') !== 'false';
            toolbar.open = isToolbarOpen;
            summaryText.textContent = isToolbarOpen ? 'Hide Filters' : 'Show Filters';
            renderActiveFilterSummary();
            toolbar.addEventListener('toggle', () => {
                const isOpen = toolbar.open;
                summaryText.textContent = isOpen ? 'Hide Filters' : 'Show Filters';
                localStorage.setItem('vi_toolbar_open', isOpen);
                renderActiveFilterSummary();
            });
        }
    });
</script>

@await Html.PartialAsync("_TopNavEnd")


@page "/library"
@model VideoIndex.Web.Pages.Library.IndexModel

@{
    ViewData["Title"] = "Library";
}

@await Html.PartialAsync("_TopNav")

<h1>Library</h1>

<div class="library-toolbar">
  <div id="filtersWrap" class="library-filters">

    <div class="field filter-panel perf">
      <label>Number of Performers</label>
      <div class="hstack">
        <input id="minPerf" type="number" min="0" placeholder="min" style="width:5rem">
        <input id="maxPerf" type="number" min="0" placeholder="max" style="width:5rem">
        <button type="button" class="tagbtn quick-perf" data-min="1" data-max="99">All</button>
        <button type="button" class="tagbtn quick-perf" data-min="1" data-max="1">Solo</button>
        <button type="button" class="tagbtn quick-perf" data-min="2" data-max="2">Duo</button>
        <button type="button" class="tagbtn quick-perf" data-min="3" data-max="99">Group</button>
      </div>
    </div>

    <div class="field filter-panel ori">
      <label>Orientation</label>
      <div class="hstack" id="oriGroup">
        <button type="button" class="tagbtn" data-ori="Gay">Gay</button>
        <button type="button" class="tagbtn" data-ori="Straight">Straight</button>
        <button type="button" class="tagbtn" data-ori="Bi">Bi</button>
        <button type="button" class="tagbtn" data-ori="FtM Trans">FtM Trans</button>
        <button type="button" class="tagbtn" data-ori="MtF Trans">MtF Trans</button>
      </div>
    </div>
    
    <div class="field filter-panel src">
      <label>Source type</label>
      <div class="hstack" id="srcGroup">
        <button type="button" class="tagbtn" data-src="Studio">Studio</button>
        <button type="button" class="tagbtn" data-src="OnlyFans">OnlyFans</button>
        <button type="button" class="tagbtn" data-src="Amateur">Amateur</button>
        <button type="button" class="tagbtn" data-src="Vintage">Vintage</button>
        <button type="button" class="tagbtn" data-src="Webcam">Webcam</button>
        <button type="button" class="tagbtn" data-src="Spycam">Spycam</button>
        <button type="button" class="tagbtn" data-src="CCTV">CCTV</button>
        <button type="button" class="tagbtn" data-src="Selfie">Selfie</button>
        <button type="button" class="tagbtn" data-src="Social Media">Social Media</button>
        <button type="button" class="tagbtn" data-src="Animated">Animated</button>
        <button type="button" class="tagbtn" data-src="Unknown">Unknown</button>
      </div>
    </div>
  </div>

  <div class="field">
    <label>Search</label>
    <div class="hstack">
      <input id="searchBox" type="text" placeholder="Search filename, path/folders, tags, performers, studio, source user, year…" style="min-width:18rem">
      <button id="clearSearch" class="btn ghost" type="button" title="Clear">×</button>
    </div>

    <label style="margin-top:.75rem;">Sort</label>
    <select id="sortSel">
      <option value="updated_desc">Updated (newest)</option>
      <option value="updated_asc">Updated (oldest)</option>
      <option value="size_desc">Size (largest)</option>
      <option value="size_asc">Size (smallest)</option>
      <option value="length_desc">Length (longest)</option>
      <option value="length_asc">Length (shortest)</option>
      <option value="source_asc">Source (A→Z)</option>
      <option value="source_desc">Source (Z→A)</option>
      <option value="year_desc">Year (newest)</option>
      <option value="year_asc">Year (oldest)</option>
    </select>
    
    <div class="hstack" style="margin-top:.5rem;">
      <button id="toggleFilters" class="btn ghost" type="button">Hide filters</button>
      <button id="resetAll" class="btn ghost" type="button">Show all</button>
    </div>
  </div>
</div>

<div id="scopeBar" class="hstack" style="margin:4px 0 10px 0;"></div>

<div class="hstack" style="justify-content:space-between; margin:10px 0;">
  <div><b id="totalCount">0</b> total</div>
  <div class="muted">Showing <span id="shownCount">0</span> of 36 per page</div>
</div>

<div id="grid" class="library-grid"></div>

<div style="margin-top:12px;">
  <button id="loadMore" class="btn">Load more</button>
  <span id="status" class="muted" style="margin-left:.5rem;"></span>
</div>

<script>
  const $ = s => document.querySelector(s);
  const $$ = s => Array.from(document.querySelectorAll(s));

  const TAKE = 36;

  // ---- state ----
  let srcSel = new Set();
  let oriSel = new Set();
  let skip = 0;
  let total = 0;
  let filtersHidden = false;
  // ---- URL helpers ----
  function getParams(){
    const u = new URL(location.href);
    return u.searchParams;
  }
  function setParams(updates){
    const u = new URL(location.href);
    const sp = u.searchParams;
    ["source","orientation","minPerformers","maxPerformers","sort","skip","q"].forEach(k=>sp.delete(k));
    for (const [k,v] of Object.entries(updates)){
      if (v === null || v === undefined || v === "" || (Array.isArray(v) && v.length===0)) continue;
      if (Array.isArray(v)) sp.set(k, v.join(","));
      else sp.set(k, String(v));
    }
    history.replaceState({}, "", u.toString());
  }
  function clearFolderFilterInUrl(){
    const u = new URL(location.href);
    u.searchParams.delete("dir");
    u.searchParams.delete("recursive");
    history.replaceState({}, "", u.toString());
    renderScopeBar();
  }
  function getFolderFilterFromUrl(){
    const sp = getParams();
    const dir = sp.get("dir") || "";
    const recursive = (sp.get("recursive") || "false").toLowerCase() === "true";
    return { dir, recursive };
  }
  function basename(p){
    if (!p) return "";
    const parts = p.split(/[\\/]+/).filter(Boolean);
    return parts.length ? parts[parts.length-1] : p;
  }

  function quickPerfMatches(btn){
    const min = btn.getAttribute('data-min') ?? "";
    const max = btn.getAttribute('data-max') ?? "";
    const curMin = ($("#minPerf").value ?? "").trim();
    const curMax = ($("#maxPerf").value ?? "").trim();
    return (min === curMin) && (max === curMax);
  }
  function updateQuickPerfButtons(){
    $$(".quick-perf").forEach(b=>{
      b.classList.toggle("on", quickPerfMatches(b));
    });
  }

  function readFromUrl(){
    const sp = getParams();
    (sp.get("source") || "").split(",").map(s=>s.trim()).filter(Boolean).forEach(v=>srcSel.add(v));
    (sp.get("orientation") || "").split(",").map(s=>s.trim()).filter(Boolean).forEach(v=>oriSel.add(v));
    const minP = sp.get("minPerformers"); const maxP = sp.get("maxPerformers");
    if (minP) $("#minPerf").value = minP;
    if (maxP) $("#maxPerf").value = maxP;
    const sort = sp.get("sort");
    if (sort) $("#sortSel").value = sort;
    skip = parseInt(sp.get("skip") || "0", 10);
    if (Number.isNaN(skip) || skip<0) skip = 0;
    const qInit = sp.get("q");
    if (qInit) $("#searchBox").value = qInit;
    $$("#srcGroup .tagbtn").forEach(b=> b.classList.toggle("on", srcSel.has(b.getAttribute("data-src"))));
    $$("#oriGroup .tagbtn").forEach(b=> b.classList.toggle("on", oriSel.has(b.getAttribute("data-ori"))));
    updateQuickPerfButtons();
  }

  // Normalize API item
  function norm(it){
    return {
      Id: it.Id ?? it.id,
      Filename: it.Filename ?? it.filename,
      SizeHuman: it.SizeHuman ?? it.sizeHuman,
      LengthHuman: it.LengthHuman ?? it.lengthHuman,
      Width: it.Width ?? it.width,
      Height: it.Height ?? it.height,
      Year: it.Year ?? it.year,
      PerformerCount: it.PerformerCount ?? it.performerCount,
      SourceTypes: it.SourceTypes ?? it.sourceTypes ?? [],
      OrientationTags: it.OrientationTags ?? it.orientationTags ?? [],
      OtherTags: it.OtherTags ?? it.otherTags ?? [],
      StudioName: it.StudioName ?? it.studioName,
      UpdatedAt: it.UpdatedAt ?? it.updatedAt,
      Thumb: it.Thumb ?? it.thumb
    };
  }

  // ---- rendering ----
  function card(raw){
    const item = norm(raw);
    const res = (item.Width && item.Height) ? `${item.Width}×${item.Height}` : "—";
    const len = item.LengthHuman ?? "—";
    const statsHtml = `
      <span class="chip meta">${escapeHtml(item.SizeHuman)}</span>
      <span class="chip meta">Len: ${len}</span>
      <span class="chip meta">Res: ${res}</span>
    `;
    const oriHtml = (item.OrientationTags || [])
      .filter(Boolean)
      .map(t=>{
        const filtered = oriSel.has(t) ? " filtered" : "";
        return `<span class="chip ori clickable${filtered}" data-ori="${escapeHtml(t)}">${escapeHtml(t)}</span>`;
      })
      .join(" ");
    const pc = item.PerformerCount;
    const perfBadge = badgeFromCountForCard(pc);
    const perfFiltered = isPerformerFilterActiveFor(pc) ? " filtered" : "";
    const perfHtml = (pc != null)
      ? (pc === 1
          ? `<span class="chip perf clickable${perfFiltered}" data-min="1" data-max="1">${perfBadge}</span>`
          : pc === 2
            ? `<span class="chip perf clickable${perfFiltered}" data-min="2" data-max="2">${perfBadge}</span>`
            : `<span class="chip perf clickable${perfFiltered}" data-min="3" data-max="99">${perfBadge}</span>`)
      : "";
    const srcHtml = (item.SourceTypes || [])
      .filter(Boolean)
      .map(t=>{
        const filtered = srcSel.has(t) ? " filtered" : "";
        return `<span class="chip src clickable${filtered}" data-src="${escapeHtml(t)}">${escapeHtml(t)}</span>`;
      })
      .join(" ");
    return `
      <a class="library-card" href="/media/${item.Id}">
        <img class="thumb" src="${item.Thumb}" alt="thumb" loading="lazy" onerror="this.style.display='none'">
        <div class="muted filename">${escapeHtml(item.Filename)}</div>
        <div class="meta">${statsHtml}</div>
        <div class="meta">
          ${oriHtml}
          ${perfHtml}
          ${srcHtml}
        </div>
      </a>`;
  }

  function badgeFromCountForCard(pc){
    if (pc === 1) return "Solo";
    if (pc === 2) return "Duo";
    if (pc >= 3) return "Group";
    return "—";
  }
  function isPerformerFilterActiveFor(pc){
    const minP = ($("#minPerf").value ?? "").trim();
    const maxP = ($("#maxPerf").value ?? "").trim();
    if (!minP && !maxP) return false;
    const min = parseInt(minP || "NaN", 10);
    const max = parseInt(maxP || "NaN", 10);
    if (Number.isNaN(pc)) return false;
    if (min === 1 && max === 1) return pc === 1;
    if (min === 2 && max === 2) return pc === 2;
    if (min >= 3 && (!maxP || (!Number.isNaN(max) && max >= 3))) return pc >= 3;
    return false;
  }

  function escapeHtml(s){
    s = (s ?? "").toString();
    return s.replace(/[&<>"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#039;'}[c]));
  }

  function updateCounts(shownAdd){
    const shown = Math.min(skip + shownAdd, total);
    $("#shownCount").textContent = Math.min(shown, TAKE);
    $("#totalCount").textContent = total;
  }

  function renderScopeBar(){
    const { dir, recursive } = getFolderFilterFromUrl();
    const bar = $("#scopeBar");
    if (!bar) return;
    bar.innerHTML = "";
    if (!dir) return;

    const chip = document.createElement("span");
    chip.className = "chip chip--flex folder";
    chip.title = dir;
    const breakable = escapeHtml(dir).replace(/([\\/])/g, '$1&#8203;');

    chip.innerHTML =
      `📁 <span class="path">${breakable}</span>` +
      (recursive ? " (all subfolders)" : "") +
      ` <button type="button" id="clearFolderFilter" class="x" title="Clear folder filter">×</button>`;
    bar.appendChild(chip);

    $("#clearFolderFilter")?.addEventListener("click", () => {
      clearFolderFilterInUrl();
      reload(true);
    });
  }

  // ---- fetch ----
  async function fetchPage(append=false){
    $("#status").textContent = "loading…";
    $("#loadMore").disabled = true;
    const params = new URLSearchParams();
    params.set("skip", String(skip));
    params.set("take", String(TAKE));

    const q = ($("#searchBox").value ?? "").trim();
    if (q) params.set("q", q);
    if (srcSel.size) params.set("source", [...srcSel].join(","));
    if (oriSel.size) params.set("orientation", [...oriSel].join(","));

    const minP = $("#minPerf").value.trim();
    const maxP = $("#maxPerf").value.trim();
    if (minP) params.set("minPerformers", minP);
    if (maxP) params.set("maxPerformers", maxP);

    params.set("sort", $("#sortSel").value);

    const { dir, recursive } = getFolderFilterFromUrl();
    if (dir) {
      params.set("dir", dir);
      params.set("recursive", recursive ? "true" : "false");
    }

    const url = `/api/media/browse?${params.toString()}`;
    try {
      const res = await fetch(url);
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
      const data = await res.json();
      total = data.total ?? 0;

      const grid = $("#grid");
      if (!append) grid.innerHTML = "";
      const html = (data.items || []).map(card).join("");
      grid.insertAdjacentHTML("beforeend", html);

      $("#loadMore").disabled = (skip + TAKE >= total);
      $("#status").textContent = (skip + TAKE >= total) ? "end of results" : "";
      updateCounts(data.items?.length ?? 0);
    } catch (e) {
      $("#status").textContent = "error: " + (e.message || e);
    }
  }

  function reload(resetSkip=true){
    if (resetSkip) skip = 0;
    setParams({
      source: [...srcSel],
      orientation: [...oriSel],
      minPerformers: $("#minPerf").value.trim() || null,
      maxPerformers: $("#maxPerf").value.trim() || null,
      sort: $("#sortSel").value,
      q: ($("#searchBox").value ?? "").trim() || null,
      skip
    });
    renderScopeBar();
    fetchPage(false);
  }

  function toggleFilters(){
    const wrap = $("#filtersWrap");
    filtersHidden = !filtersHidden;
    if (filtersHidden) {
      wrap.setAttribute("hidden", "hidden");
      $("#toggleFilters").textContent = "Show filters";
    } else {
      wrap.removeAttribute("hidden");
      $("#toggleFilters").textContent = "Hide filters";
    }
  }

  function resetAll(){
    srcSel.clear();
    oriSel.clear();
    $("#minPerf").value = "";
    $("#maxPerf").value = "";
    $("#sortSel").value = "updated_desc";
    $("#searchBox").value = "";
    $$("#srcGroup .tagbtn").forEach(b=> b.classList.remove("on"));
    $$("#oriGroup .tagbtn").forEach(b=> b.classList.remove("on"));
    updateQuickPerfButtons();
    clearFolderFilterInUrl();
    reload(true);
  }

  function debounce(fn, ms){ let t; return function(...args){ clearTimeout(t); t=setTimeout(()=>fn.apply(this,args), ms); }; }
  function scrollTopSmooth(){ window.scrollTo({ top: 0, behavior: 'smooth' }); }

  // ---------- page init ----------
  document.addEventListener("DOMContentLoaded", () => {
    readFromUrl();
    renderScopeBar();
    reload(false);

    $("#oriGroup").addEventListener("click", (e)=>{
      const btn = e.target.closest('.tagbtn'); if (!btn) return;
      const v = btn.getAttribute("data-ori");
      if (btn.classList.contains("on")) { btn.classList.remove("on"); oriSel.delete(v); }
      else { btn.classList.add("on"); oriSel.add(v); }
      reload();
    });

    $("#srcGroup").addEventListener("click", (e)=>{
      const btn = e.target.closest('.tagbtn'); if (!btn) return;
      const v = btn.getAttribute("data-src");
      if (btn.classList.contains("on")) { btn.classList.remove("on"); srcSel.delete(v); }
      else { btn.classList.add("on"); srcSel.add(v); }
      reload();
    });

    $("#grid").addEventListener("click", (e)=>{
      const chip = e.target.closest(".chip.clickable");
      if (!chip) return;
      e.preventDefault(); e.stopPropagation();

      const vSrc = chip.dataset.src;
      const vOri = chip.dataset.ori;
      let changed = false;

      if (vSrc && !srcSel.has(vSrc)) {
        srcSel.add(vSrc);
        $(`#srcGroup .tagbtn[data-src="${CSS.escape(vSrc)}"]`)?.classList.add("on");
        changed = true;
      }
      if (vOri && !oriSel.has(vOri)) {
        oriSel.add(vOri);
        $(`#oriGroup .tagbtn[data-ori="${CSS.escape(vOri)}"]`)?.classList.add("on");
        changed = true;
      }

      if (chip.classList.contains("perf")) {
        const min = chip.getAttribute("data-min") || "";
        const max = chip.getAttribute("data-max") || "";
        if ($("#minPerf").value !== min || $("#maxPerf").value !== max) {
          $("#minPerf").value = min;
          $("#maxPerf").value = max;
          updateQuickPerfButtons();
          changed = true;
        }
      }

      if (changed) reload();
    });

    document.addEventListener("click", (e) => {
      const b = e.target.closest('.quick-perf'); 
      if (!b) return;
      if (quickPerfMatches(b)) {
        $("#minPerf").value = "";
        $("#maxPerf").value = "";
      } else {
        $("#minPerf").value = b.getAttribute("data-min") ?? "";
        $("#maxPerf").value = b.getAttribute("data-max") ?? "";
      }
      updateQuickPerfButtons();
      scrollTopSmooth();
      reload();
    });

    $("#minPerf").addEventListener("change", ()=> { reload(); updateQuickPerfButtons(); });
    $("#maxPerf").addEventListener("change", ()=> { reload(); updateQuickPerfButtons(); });

    $("#sortSel").addEventListener("change", ()=> reload());
    const onSearch = debounce(()=> reload(), 300);
    $("#searchBox").addEventListener("input", onSearch);
    $("#clearSearch").addEventListener("click", ()=>{
      $("#searchBox").value = "";
      reload();
    });
    $("#loadMore").addEventListener("click", ()=>{
      skip += TAKE;
      setParams({
        source: [...srcSel],
        orientation: [...oriSel],
        minPerformers: $("#minPerf").value.trim() || null,
        maxPerformers: $("#maxPerf").value.trim() || null,
        sort: $("#sortSel").value,
        q: ($("#searchBox").value ?? "").trim() || null,
        skip
      });
      fetchPage(true);
    });

    $("#toggleFilters").addEventListener("click", toggleFilters);
    $("#resetAll").addEventListener("click", resetAll);
  });
</script>

@await Html.PartialAsync("_TopNavEnd")
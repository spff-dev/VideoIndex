@page "/scan"
@model VideoIndex.Web.Pages.Scan.IndexModel

@{
    ViewData["Title"] = "Live Scan";
}

@await Html.PartialAsync("_TopNav")

<div class="scan-page">
    <h1>Live Scan</h1>

    <div class="row">
      <label for="rootSelect">Root:</label>
      <select id="rootSelect">
        @foreach (var r in Model.Roots)
        {
          <option value="@r.Id">@r.Name (@r.Path)</option>
        }
      </select>
      <button id="startBtn" class="btn primary">Start Scan</button>
      <button id="stopBtn" class="btn" style="display: none;">Stop Scan</button>
      <span id="status" class="muted">idle</span>
    </div>

    <div class="row">
        <label class="hstack" style="font-weight:normal;">
            <input id="newFilesOnly" type="checkbox" checked />
            <span>Scan new files only</span>
        </label>
        <label class="hstack" style="font-weight:normal;">
            <input id="autoTag" type="checkbox" checked />
            <span>Auto-tag new files</span>
        </label>
    </div>

    <div class="row" style="width:100%;">
      <progress id="prog" value="0" max="100" style="width: 360px;"></progress>
      <span id="counts" class="muted"></span>
    </div>

    <pre id="log"></pre>
</div>

<script src="https://unpkg.com/%40microsoft/signalr@latest/dist/browser/signalr.min.js"></script>
<script>
  const $ = sel => document.querySelector(sel);
  const logEl = $("#log");
  const statusEl = $("#status");
  const countsEl = $("#counts");
  const progEl = $("#prog");
  const startBtn = $("#startBtn");
  const stopBtn = $("#stopBtn");
  const newFilesOnlyCheck = $("#newFilesOnly");
  const autoTagCheck = $("#autoTag");

  let currentScanId = null;

  function log(msg, cls = "") {
    const time = new Date().toLocaleTimeString();
    const line = `[${time}] ${msg}\n`;
    const span = document.createElement("span");
    if (cls) span.className = cls;
    span.textContent = line;
    logEl.appendChild(span);
    logEl.scrollTop = logEl.scrollHeight;
  }

  function setStatus(txt) { statusEl.textContent = txt; }

  startBtn.addEventListener("click", async () => {
    startBtn.disabled = true;
    stopBtn.style.display = 'inline-flex';
    logEl.innerHTML = "";
    setStatus("connecting…");

    const rootId = parseInt($("#rootSelect").value, 10);
    const newFilesOnly = newFilesOnlyCheck.checked;
    const autoTag = autoTagCheck.checked;
    currentScanId = crypto.randomUUID();

    const connection = new signalR.HubConnectionBuilder()
      .withUrl("/hubs/scan")
      .withAutomaticReconnect()
      .build();

    let totalFiles = 0;

    connection.on("progress", evt => {
        let { processed = 0, indexed = 0, tagged = 0, errors = 0 } = evt;
        countsEl.textContent = `${processed} / ${totalFiles} | Indexed: ${indexed} | Tagged: ${tagged} | Errors: ${errors}`;
        progEl.value = processed;
      
        switch (evt.kind) {
            case "started":
                totalFiles = evt.totals.files || 0;
                progEl.max = Math.max(totalFiles, 1);
                setStatus("running");
                log(`Scan started on "${evt.root.name}" — found ${totalFiles} files to process.`, "muted");
                break;
            case "indexError":
                log(`Index error: ${evt.file} — ${evt.error}`, "err");
                break;
            case "cancelled":
                setStatus("stopped");
                log(`Scan was stopped by user.`, "warn");
                startBtn.disabled = false;
                stopBtn.style.display = 'none';
                connection.stop();
                break;
            case "completed":
                setStatus("done");
                log(`Completed in ${evt.elapsedMs} ms.`, "ok");
                startBtn.disabled = false;
                stopBtn.style.display = 'none';
                connection.stop();
                break;
        }
    });

    try {
        await connection.start();
        await connection.invoke("JoinScan", currentScanId);
        log(`Joined scan channel ${currentScanId}`, "muted");

        const params = new URLSearchParams({
            scanId: currentScanId,
            newFilesOnly: newFilesOnly,
            autoTag: autoTag,
            thumbs: true, // Assuming you always want thumbs for new files
            dop: 8
        });
        const url = `/api/roots/${rootId}/scan-live?${params.toString()}`;
        const resp = await fetch(url, { method: "POST" });
        if (!resp.ok) {
            const text = await resp.text();
            log(`Scan start failed: ${resp.status} ${text}`, "err");
            setStatus("error");
            startBtn.disabled = false;
            stopBtn.style.display = 'none';
        }
    } catch (e) {
        log(`SignalR error: ${e}`, "err");
        setStatus("error");
        startBtn.disabled = false;
        stopBtn.style.display = 'none';
    }
  });

  stopBtn.addEventListener("click", async () => {
    if (!currentScanId) return;
    setStatus("stopping…");
    stopBtn.disabled = true;
    await fetch(`/api/scan/${currentScanId}/stop`, { method: "POST" });
  });

</script>

@await Html.PartialAsync("_TopNavEnd")
